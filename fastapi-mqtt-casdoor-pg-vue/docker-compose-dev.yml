services:

  backend:
    restart: on-failure
    hostname: backend
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - full-stack-2-net
    ports:
      - ${BACKEND_PORT}:9001
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./backend/app:/var/www/app/:delegated
    environment:
      ENV:                      ${BACKEND_ENV}
      POSTGRES_PORT:            ${POSTGRES_PORT}
      POSTGRES_PASSWORD:        ${POSTGRES_PASSWORD}
      POSTGRES_USER:            ${POSTGRES_USER}
      POSTGRES_DB:              ${POSTGRES_DB}
      POSTGRES_HOST:            ${POSTGRES_HOST}
      BACKEND_VERSION:          ${BACKEND_VERSION}

  postgres:
    restart: on-failure
    hostname: postgres
    container_name: postgres
    build:
      context: ./postgres
      dockerfile: Dockerfile
      target: dev
    volumes:
      - vol_postgres:/var/lib/postgresql/data:delegated
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - full-stack-2-net
    environment:
      POSTGRES_PASSWORD:    ${POSTGRES_PASSWORD}
      POSTGRES_USER:        ${POSTGRES_USER}
      POSTGRES_DB:          ${POSTGRES_DB}
      PGDATA:               /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 3s

  frontend:
    restart: on-failure
    hostname: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - full-stack-2-net
    volumes:
      - ./frontend/src:/frontend/src/:delegated
    ports:
      - ${FRONTEND_PORT}:5173
    
  mqtt:
    restart: on-failure
    hostname: mqtt
    build:
      context: ./mqtt
      dockerfile: Dockerfile
      target: base
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - full-stack-2-net
    volumes:
      - ./frontend/src:/frontend/src/:delegated

  casdoor:
    restart: on-failure
    hostname: casdoor
    build:
      context: ./casdoor
      dockerfile: Dockerfile
      target: base
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - full-stack-2-net
    ports:
      - 8000:8000
    environment:
      POSTGRES_USER:        ${POSTGRES_USER}
      POSTGRES_PASSWORD:    ${POSTGRES_PASSWORD}
      POSTGRES_HOST:        ${POSTGRES_HOST}
      POSTGRES_PORT:        ${POSTGRES_PORT}
      driverName:           ${DRIVERNAME}
      dbName:               ${CASDOOR_DB_NAME}
      dataSourceName:       "user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} host=${POSTGRES_HOST} port=${POSTGRES_PORT} sslmode=disable dbname=${CASDOOR_DB_NAME}"


networks:
  full-stack-2-net:
    driver: bridge
    name: full-stack-2-net

volumes:
  vol_postgres:

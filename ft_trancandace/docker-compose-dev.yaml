services:
  backend:
    restart: on-failure
    hostname: backend
    networks:
      - ft_trance
    build:
      context: ./backend
      target: dev
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
      - 3001:3001
      - 3002:3002
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/src/:/backend/src/:delegated
    healthcheck:
        test: wget --no-verbose --tries=3 --spider http://127.0.0.1:3000/api/users || exit 1
        interval: 5s
        retries: 5 
        start_period: 5s
        timeout: 3s
    environment:
      BACKEND_PORT:       ${BACKEND_PORT}
      POSTGRES_PASSWORD:  ${POSTGRES_PASSWORD}
      POSTGRES_USER:      ${POSTGRES_USER}
      POSTGRES_DB:        ${POSTGRES_DB}
      POSTGRES_HOST:      ${POSTGRES_HOST}
      HOST_ID:            ${HOST_ID}
      EXPRESS_SECRET:     ${EXPRESS_SECRET}
      JWT_SECRET:                       ${JWT_SECRET}
      JWT_REFRESH_TOKEN_SECRET:         ${JWT_REFRESH_TOKEN_SECRET}
      JWT_ACCESS_TOKEN_EXPIRATION_TIME:   ${JWT_ACCESS_TOKEN_EXPIRATION_TIME}

      TWO_FACTOR_AUTHENTICATION_APP_NAME: ${TWO_FACTOR_AUTHENTICATION_APP_NAME}
      CLIENT_ID:     ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}

  frontend:
    hostname: frontend
    restart: on-failure
    networks:
      - ft_trance
    build:
      context: ./frontend
      target: dev
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes:
      - ./frontend/src/:/frontend/src/:delegated
    healthcheck:
        test: wget --no-verbose --tries=3 --spider http://127.0.0.1:${FRONTEND_PORT}/ || exit 1
        interval: 5s
        retries: 5 
        start_period: 5s
        timeout: 3s
    environment:
      HOST_ID:            ${HOST_ID}

  postgres:
    restart: on-failure
    hostname: postgres
    build:
      context: ./postgres
      target: dev
    volumes:
      - vol_postgres:/var/lib/mysql/:delegated
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - ft_trance
    environment:
      POSTGRES_PASSWORD:    ${POSTGRES_PASSWORD}
      POSTGRES_USER:        ${POSTGRES_USER}
      POSTGRES_DB:          ${POSTGRES_DB}
    healthcheck:
        test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
        interval: 5s
        retries: 5 
        start_period: 5s
        timeout: 3s

#  casdoor:
#    restart: on-failure
#    hostname: postgres
#    build:
#      context: ./postgres
#      target: dev
#    volumes:
#      - vol_postgres:/var/lib/mysql/:delegated
#    ports:
#      - 8000:5432
#    networks:
#      - ft_trance
#    environment:
#      driverName:           ${POSTGRES_PASSWORD}
#      dataSourceName:       ${POSTGRES_USER}
#      appname = casdoor
#      httpport = 8000
#      runmode = dev
#      copyrequestbody = true
#      driverName = postgres
#      dataSourceName = user:SuperSecret@tcp(postgres:5432)/
#      dbName = casdoor
#      tableNamePrefix =
#      showSql = false
#      redisEndpoint =
#      defaultStorageProvider =
#      isCloudIntranet = false
#      authState = "casdoor"
#      socks5Proxy = "127.0.0.1:10808"
#      verificationCodeTimeout = 10
#      initScore = 0
#      logPostOnly = true
#      isUsernameLowered = false
#      origin =
#      originFrontend =
#      staticBaseUrl = "https://cdn.casbin.org"
#      isDemoMode = false
#      batchSize = 100
#      enableGzip = true
#      ldapServerPort = 389
#      radiusServerPort = 1812
#      radiusSecret = "secret"
#      quota = {"organization": -1, "user": -1, "application": -1, "provider": -1}
#      logConfig = {"filename": "logs/casdoor.log", "maxdays":99999, "perm":"0770"}
#      initDataFile = "./init_data.json"
#      frontendBaseDir = "../casdoor"


networks:
  ft_trance:
    driver: bridge

volumes:
  vol_postgres:
